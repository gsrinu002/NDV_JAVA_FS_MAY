Spring Boot ?
---------------

Spring boot is a project built on sping framework . 

it simplifies the process of building production ready applications for web 

features 
----------
-> provides auto configurtation  : depencies 

-> create stanalone applcations 

-> it will come up with tomcat /jetty /undertwo servers 

-> reducing the boilerplate code 

Create first spring boot project 
-------------------------------------
open browser -> search for spring intilizer 

project -> maven 
language -> java 
give ur project name 
add depencies below  by clicking on add depencies 

(REST API)
==================

1. spring web  : build for REST API  using with spring MVC 
2. spring boot Devtools : for reloads fast development 
3. spring validation : input validations 
4. thymeleaf : for server side html rendering  

Access Data base 
==================

1.Spring Data JPA 
2.MySQL Driver 
3.H2 Data base 
4.postgre SQL driver 
5. Spring JDBC 
6. flyway 


Web developent : 

Dependecies  ? 
----------------- 
spring web  : build rest Apis using spring MVC 
spring boot dev tools  : hot reload for fast development 
sring validation  : input validations using annotations
thymeleaf  : for server side HTML rendering 

Related annotations 
----------------------

@Controller: Indicates that a class is a web controller, handling incoming requests. 

@RequestMapping: Maps HTTP requests to specific handler methods. Can be used at the 
class and method level to define base paths and specific endpoints. 

@GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping: Specialized mapping annotations for different HTTP methods (GET, POST, PUT, DELETE, PATCH) respectively. 

@PathVariable: Extracts values from URI path variables. 

@RequestParam: Extracts request parameters from the query string or request body. 

@RequestBody: Binds the HTTP request body to a method parameter. 

@ResponseBody: Indicates that the return value of a method should be written directly to the HTTP response body.

@RestController: A convenience annotation that combines @Controller and @ResponseBody, simplifying the creation of RESTful APIs. 




Useful annotations 
--------------------
@ModelAttribute: Binds request parameters to a model attribute, making it available in the view. 

@CrossOrigin: Enables cross-origin resource sharing (CORS). 

@ExceptionHandler: Handles exceptions thrown within a controller. 

@ResponseStatus: Specifies the HTTP status code to be returned in the response. 

@CookieValue: Retrieves the value of a cookie from the request. 

@RequestHeader, @ResponseHeader: Used to access request headers and set response headers, respectively. 


Controller (API layer) -> service layer (bussiness logic layer) -> repository layer 
     (data access layer)

CRUD 

REST 






